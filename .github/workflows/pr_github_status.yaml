name: Set PR Status to In Progress

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  update-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const projectNumber = 31; // Replace with your project number
            const statusFieldName = "Status";
            const newStatus = "In Progress";

            const { data: projects } = await github.graphql(`
              query {
                viewer {
                  projectsV2(first: 100) {
                    nodes {
                      id
                      title
                      number
                    }
                  }
                }
              }
            `);

            const project = projects.viewer.projectsV2.nodes.find(p => p.number === projectNumber);
            if (!project) {
              throw new Error(`Project #${projectNumber} not found`);
            }

            const projectId = project.id;

            // Get PR's project item
            const { data: items } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const item = items.node.items.nodes.find(i => i.content?.number === pr.number);
            if (!item) {
              throw new Error(`PR #${pr.number} not found in project`);
            }

            const itemId = item.id;

            // Get fields for the project
            const { data: fields } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = fields.node.fields.nodes.find(f => f.name === statusFieldName);
            if (!statusField) {
              throw new Error(`Field '${statusFieldName}' not found`);
            }

            const statusFieldId = statusField.id;

            // Get possible field options
            const { data: fieldOptions } = await github.graphql(`
              query($fieldId: ID!) {
                node(id: $fieldId) {
                  ... on ProjectV2SingleSelectField {
                    options {
                      id
                      name
                    }
                  }
                }
              }
            `, { fieldId: statusFieldId });

            const option = fieldOptions.node.options.find(opt => opt.name === newStatus);
            if (!option) {
              throw new Error(`Option '${newStatus}' not found`);
            }

            const optionId = option.id;

            // Set field value
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusFieldId,
              optionId
            });
