name: Set PR Status to In Review

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_PERSONAL_ACCESS_TOKEN }}
          script: |
            async function getProjectByNumber(orgLogin, projectNumber) {
              const result = await github.graphql(`
                query($org: String!) {
                  organization(login: $org) {
                    projectsV2(first: 100) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `, { org: orgLogin });

              const project = result.organization.projectsV2.nodes.find(p => p.number === projectNumber);
              if (!project) {
                throw new Error(\`Project #\${projectNumber} not found in org \${orgLogin}\`);
              }

              return project.id;
            }

            async function findItemInProject(projectId, prNumber) {
              let hasNextPage = true;
              let after = null;

              while (hasNextPage) {
                const result = await github.graphql(`
                  query($projectId: ID!, $after: String) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100, after: $after) {
                          pageInfo {
                            hasNextPage
                            endCursor
                          }
                          nodes {
                            id
                            content {
                              ... on PullRequest {
                                id
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `, { projectId, after });

                const items = result.node.items.nodes;
                const item = items.find(i => i.content?.number === prNumber);
                if (item) return item.id;

                hasNextPage = result.node.items.pageInfo.hasNextPage;
                after = result.node.items.pageInfo.endCursor;
              }

              return null;
            }

            async function getStatusField(projectId, fieldName) {
              const result = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 100) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, { projectId });

              const field = result.node.fields.nodes.find(f => f.name === fieldName);
              if (!field) throw new Error(\`Field '\${fieldName}' not found\`);
              return field;
            }

            function getOptionId(field, statusName) {
              const option = field.options.find(opt => opt.name === statusName);
              if (!option) {
                throw new Error(\`Option '\${statusName}' not found in field '\${field.name}'\`);
              }
              return option.id;
            }

            async function updateStatus(projectId, itemId, fieldId, optionId) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: {
                      singleSelectOptionId: $optionId
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, { projectId, itemId, fieldId, optionId });
            }

            // --- Main Flow ---
            const pr = context.payload.pull_request;
            const projectNumber = 31;
            const statusFieldName = "Status";
            const newStatus = "In Review";
            const orgLogin = "lambdaclass";

            const projectId = await getProjectByNumber(orgLogin, projectNumber);
            const itemId = await findItemInProject(projectId, pr.number);

            if (!itemId) {
              console.log(\`PR #\${pr.number} not found in project.\`);
              return;
            }

            console.log(\`PR #\${pr.number} found with item ID: \${itemId}\`);

            const statusField = await getStatusField(projectId, statusFieldName);
            const optionId = getOptionId(statusField, newStatus);

            await updateStatus(projectId, itemId, statusField.id, optionId);
