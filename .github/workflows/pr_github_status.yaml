# .github/workflows/set-pr-status.yml
name: Set PR Status to In Progress

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_PERSONAL_ACCESS_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const projectNumber = 31;
            const statusFieldName = "Status";
            const newStatus = "In Progress";
            const orgLogin = "lambdaclass";

            // Fetch all projects in the organization
            const projects = await github.graphql(`
              query($org: String!) {
                organization(login: $org) {
                  projectsV2(first: 100) {
                    nodes {
                      id
                      title
                      number
                    }
                  }
                }
              }
            `, { org: orgLogin });

            const project = projects.organization.projectsV2.nodes.find(p => p.number === projectNumber);
            if (!project) {
              throw new Error(`Project #${projectNumber} not found in org ${orgLogin}`);
            }
            const projectId = project.id;

            // Try to find the PR item in the project
            const itemsResult = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            let item = itemsResult.node.items.nodes.find(i => i.content?.number === pr.number);
            let itemId;

            // Add PR to project if not already in
            if (!item) {
              console.log(`PR #${pr.number} not found in project. Adding it...`);
              const addResult = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId,
                contentId: pr.node_id
              });
              itemId = addResult.addProjectV2ItemById.item.id;
              console.log(`PR added to project with item ID: ${itemId}`);
            } else {
              itemId = item.id;
            }

            // Fetch project fields and options
            const fieldsResult = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = fieldsResult.node.fields.nodes.find(f => f.name === statusFieldName);
            if (!statusField) {
              throw new Error(`Field '${statusFieldName}' not found`);
            }

            const option = statusField.options.find(opt => opt.name === newStatus);
            if (!option) {
              throw new Error(`Option '${newStatus}' not found`);
            }

            // Update the Status field
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optionId: option.id
            });
