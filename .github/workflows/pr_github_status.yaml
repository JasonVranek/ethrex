# .github/workflows/set-pr-status.yml
name: Set PR Status to In Progress

on:
  pull_request:
    types: [opened, reopened, synchronize, edited]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_PERSONAL_ACCESS_TOKEN }}
          script: |
            // ========== FUNCTIONS ==========

            async function getProject(org, number) {
              const res = await github.graphql(`
                query($org: String!) {
                  organization(login: $org) {
                    projectsV2(first: 100) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `, { org });
              const project = res.organization.projectsV2.nodes.find(p => p.number === number);
              if (!project) throw new Error(`Project #${number} not found in org ${org}`);
              return project;
            }

            async function findProjectItem(projectId, prNumber) {
              let hasNextPage = true;
              let after = null;

              while (hasNextPage) {
                const res = await github.graphql(`
                  query($projectId: ID!, $after: String) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100, after: $after) {
                          pageInfo {
                            hasNextPage
                            endCursor
                          }
                          nodes {
                            id
                            content {
                              ... on PullRequest {
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `, { projectId, after });

                const items = res.node.items.nodes;
                const found = items.find(i => i.content?.number === prNumber);
                if (found) return found;

                hasNextPage = res.node.items.pageInfo.hasNextPage;
                after = res.node.items.pageInfo.endCursor;
              }

              return null;
            }

            async function setProjectItemDateField(projectId, itemId, fieldName, dateValue) {
              const res = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 100) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                            dataType
                          }
                        }
                      }
                    }
                  }
                }
              `, { projectId });

              const field = res.node.fields.nodes.find(f => f.name === fieldName && f.dataType === "DATE");
              if (!field) throw new Error(`Date field '${fieldName}' not found`);

              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $dateValue: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $dateValue }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId,
                itemId,
                fieldId: field.id,
                dateValue
              });
            }

            async function setProjectItemStatus(projectId, itemId, fieldName, optionName) {
              const res = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 100) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, { projectId });

              const field = res.node.fields.nodes.find(f => f.name === fieldName);
              if (!field) throw new Error(`Field '${fieldName}' not found`);

              const option = field.options.find(opt => opt.name === optionName);
              if (!option) throw new Error(`Option '${optionName}' not found in field '${fieldName}'`);

              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId,
                itemId,
                fieldId: field.id,
                optionId: option.id
              });
            }


            // ========== MAIN LOGIC ==========
            const pr = context.payload.pull_request;
            const projectNumber = 31;
            const statusFieldName = "Status";
            const lastUpdatedFieldName = "Last Updated";
            const startDateFieldName = "Start Date";
            const orgLogin = "lambdaclass";

            // Get project and item representing Pull Request.
            const project = await getProject(orgLogin, projectNumber);
            const projectId = project.id;
            const pr_item = await findProjectItem(projectId, pr.number);
            if (!pr_item) {
              console.log(`PR #${pr.number} not found in project.`);
              return;
            }

            const today = new Date().toISOString().split("T")[0]; // "YYYY-MM-DD"

            await setProjectItemDateField(projectId, pr_item.id, startDateFieldName, today);
            await setProjectItemDateField(projectId, pr_item.id, lastUpdatedFieldName, today);

            // For some reason if I don't use variables in the "if" the CI breaks.
            let is_draft = pr.draft;
            let ready_for_review = context.payload.action === "ready_for_review";

            // If PR is in draft it is "In Progress". Otherwise, if it was opened for review it's "In Review".
            if (is_draft) {
              await setProjectItemStatus(projectId, pr_item.id, statusFieldName, "In Progress");
              console.log(`Project PR #${pr.number} status field '${statusFieldName}' is now set to In Progress.`);
            } else if (ready_for_review) {
              await setProjectItemStatus(projectId, pr_item.id, statusFieldName, "In Review");
              console.log(`Project PR #${pr.number} status field '${statusFieldName}' is now set to In Review.`);
            }
