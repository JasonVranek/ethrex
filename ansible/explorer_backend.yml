- name: Deploy Explorer
  hosts: explorer
  become: yes

  vars:
    explorer_dir: "/home/{{ ansible_user }}/explorer"
    nodejs_version: "22.16.0"

  tasks:
    - name: Install Explorer tools and libraries
      apt:
        name:
          - inotify-tools
          - make
          - g++
          - libudev-dev
          - zip
          - unzip
          - build-essential
          - cmake
          - git
          - automake
          - libtool
          - libgmp-dev
          - libgmp10
          - autoconf
          - m4
          - libncurses5-dev
          - libwxgtk3.2-dev
          - libwxgtk-webview3.2-dev
          - libgl1-mesa-dev
          - libglu1-mesa-dev
          - libpng-dev
          - libssh-dev
          - unixodbc-dev
          - xsltproc
          - fop
          - libxml2-utils
          - libncurses-dev
          - openjdk-17-jdk
        state: present

    - name: Add Erlang Solutions GPG key
      apt_key:
        url: https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc
        keyring: /etc/apt/trusted.gpg.d/erlang-solutions.gpg
        state: present

    - name: Add Erlang Solutions repository
      apt_repository:
        repo: "{{ item.repo }}"
        state: present
        filename: "{{ item.name }}"
        update_cache: yes
      loop:
        - { repo: "deb https://binaries2.erlang-solutions.com/ubuntu/ jammy-esl-erlang-25 contrib", name: "erlang" }
        - { repo: "deb https://binaries2.erlang-solutions.com/ubuntu/ trusty contrib", name: "elixir" }

    - name: Get architecture
      set_fact:
        architecture: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}"

    - name: Download NodeJS
      get_url:
        url: "https://nodejs.org/dist/v{{ nodejs_version }}/node-v{{ nodejs_version }}-linux-{{ architecture }}.tar.xz"
        dest: "/tmp/nodejs-{{ nodejs_version }}.tar.xz"
        mode: '0644'

    - name: Extract NodeJS
      unarchive:
        src: "/tmp/nodejs-{{ nodejs_version }}.tar.xz"
        dest: /tmp/
        remote_src: yes

    - name: Move NodeJS
      copy:
        remote_src: true
        src: "/tmp/nodejs-{{ nodejs_version }}/bin/"
        dest: "/usr/local/bin/"
        mode: '0755'

    - name: Install Erlang and Elixir
      apt:
        name:
          - erlang-esl
          - elixir
        state: latest

    - name: Clone Explorer repository
      git:
        repo: "https://github.com/lambdaclass/sovra-explorer.git"
        dest: "{{ explorer_dir }}"
        version: stable

    - name: Compile Explorer
      shell:
        cmd: |
          mix do deps.get, local.rebar --force, deps.compile
          mix compile
          mix do ecto.create, ecto.migrate
          cd apps/block_scout_web/assets; npm install && node_modules/webpack/bin/webpack.js --mode production; cd -
          cd apps/explorer && npm install; cd -
          mix phx.digest
        chdir: "{{ explorer_dir }}"
      vars:
        DATABASE_URL: "{{ lookup('env', 'DATABASE_URL') }}"
        SECRET_KEY_BASE: "{{ lookup('pipe', 'mix phx.gen.secret') }}" # Generate SECRET_KEY_BASE at runtime.
        ETHEREUM_JSONRPC_VARIANT: "{{ lookup('env', 'ETHEREUM_JSONRPC_VARIANT') }}"
        ETHEREUM_JSONRPC_HTTP_URL: "{{ lookup('env', 'ETHEREUM_JSONRPC_HTTP_URL') }}"
        API_V2_ENABLED: "{{ lookup('env', 'API_V2_ENABLED') }}"
        PORT: "{{ lookup('env', 'PORT') }}"
        COIN: "{{ lookup('env', 'COIN') }}"
        COIN_NAME: "{{ lookup('env', 'COIN_NAME') }}"
        DISPLAY_TOKEN_ICONS: "{{ lookup('env', 'DISPLAY_TOKEN_ICONS') }}"
        MIX_ENV: "{{ lookup('env', 'MIX_ENV') }}"
        MICROSERVICE_SC_VERIFIER_ENABLED: "{{ lookup('env', 'MICROSERVICE_SC_VERIFIER_ENABLED') }}"
        MICROSERVICE_SC_VERIFIER_URL: "{{ lookup('env', 'MICROSERVICE_SC_VERIFIER_URL') }}"
        POOL_SIZE: "{{ lookup('env', 'POOL_SIZE') }}"
        POOL_SIZE_API: "{{ lookup('env', 'POOL_SIZE_API') }}"
        DISABLE_WEBAPP: "{{ lookup('env', 'DISABLE_WEBAPP') }}"

    - name: Install Explorer service
      template:
        src: services/explorer-backend.service.j2
        dest: "/home/{{ ansible_user }}/.config/systemd/user/explorer-backend.service"

    - name: Start Explorer
      systemd:
        name: explorer-backend
        state: started
        enabled: true
        daemon_reload: true
